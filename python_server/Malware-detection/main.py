from joblib import load
from extract import extract_infos
import pandas as pd
from sklearn.preprocessing import StandardScaler

# Importing the dataset
dataset = pd.read_csv('data.csv', sep = '|')
X = dataset.drop(['Name', 'md5', 'legitimate'], axis = 1).values
y = dataset['legitimate'].values
# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)
#Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)

#load model
classifier = load("malware_detection_classifier.joblib")


def check_malware(path: str):
    x_data = extract_infos(path)
    standard_feature = sc.transform([x_data[2:]])
    result = classifier.predict(standard_feature)
    print(result)
    if result[0] == 1:
        return 'benign'
    return 'malware'

def check_malware2(path:str):
    x_data = extract_infos(path)
    print(f">Extracted data : {x_data}\n")

    standard_feature = sc.transform([x_data[2:]])
    print(f">Standarizing data : {standard_feature}\n")

    result = classifier.predict_proba(standard_feature)
    if(result[0][0] > 0.5):
        return f"Safe ({result[0][0] * 100}%)"
    else:
        return f"Malware not safe ({result[0][1] * 100}%)"


# Flask API endpoint
from flask import Flask, request, jsonify
from flask_cors import CORS
import os
import uuid
app = Flask(__name__)
CORS(app)


@app.route('/malware_detection', methods=['POST'])
def receive_data():
    if request.files.get("file") is None:
        return jsonify({'status': 'error'})
    # receive file
    f = request.files["file"]
    # saving file 
    output_name  = "uploads/" +uuid.uuid4().hex + os.path.splitext(f.filename)[1] 
    f.save(output_name)
    f.close()
    print("*"*80)
    print(f">>Received file  : {output_name}\n" )

    # check 
    result = check_malware2(output_name)  
    # delete
    #os.remove(output_name)
    #print("deleted file  " + output_name)

    print(f">Result : {result}")
    # response
    return jsonify({'status': 'success', 'result': result})   

if __name__ == '__main__':
    app.run(debug=False, port=5001)
